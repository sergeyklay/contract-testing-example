# This file is part of the Provider API Example.
#
# Copyright (C) 2023 Serghei Iakovlev <egrep@protonmail.ch>
#
# For the full copyright and license information, please view
# the LICENSE file that was distributed with this source code.

name: Contract Tests

on:
  push:
    paths-ignore:
      - '**.rst'
    branches:
      - main
      - 'feature/**'
      - 'release/**'
      - 'fix/**'

  pull_request:
    paths-ignore:
      - '**.rst'
    branches:
      - main

env:
  PYTHONUNBUFFERED: '1'

jobs:
  contract-tests:

    name: Contract Tests
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          # Number of commits to fetch.
          # 0 indicates all history for all branches and tags.
          fetch-depth: 0

      - name: Detect current Git branch
        id: current-branch
        run: |
          if [ "${{ github.head_ref }}" != "" ]; then
            ref="${{ github.head_ref }}"
          else
            ref="${{ github.ref }}"
          fi
          
          prefix="refs/heads/"
          branch=${ref#"$prefix"}
          
          echo "ref=$branch" >> $GITHUB_OUTPUT

      - name: Setup tracking for main branch
        if: steps.current-branch.outputs.ref != 'main'
        run: git branch --track main origin/main

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup Python cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up virtualenv
        run: |
          make init
          source .venv/bin/activate
          echo "$(pwd)/.venv/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: make install

      # In real life, next steps (all with `id: consumer-*`) are not necessary,
      # at least at the stage of testing the provider. Usually, when you test a
      # provider, you get contracts (pacts) from a broker that is deployed
      # somewhere in your infrastructure. However, in this, a simplified example,
      # we do not have a deployed broker, so we deploy it ourselves, right now.

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ BROKER START ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

      - name: 'Checkout ${{ steps.current-branch.outputs.ref }} consumer brach'
        id: consumer-checkout
        uses: actions/checkout@v3
        continue-on-error: true
        with:
          repository: sergeyklay/consumer-pact-example
          path: consumer-pact-example
          ref: ${{ steps.current-branch.outputs.ref }}

      # Clone default branch, if the previous step failed.
      - name: Checkout default consumer brach
        id: consumer-checkout-default
        uses: actions/checkout@v3
        if: ${{ steps.consumer-checkout.outcome == 'failure' }}
        with:
          repository: sergeyklay/consumer-pact-example
          path: consumer-pact-example

      - name: Start broker
        id: consumer-broker
        run: docker compose up -d --quiet-pull --no-color
        working-directory: consumer-pact-example/tests/broker

      - name: Print docker logs
        id: consumer-broker-logs
        if: failure()
        run: docker compose logs
        working-directory: consumer-pact-example/tests/broker

      - name: Publish consumer's pacts to broker
        id: consumer-publish-pacts
        run: ./publish-contracts.sh
        working-directory: consumer-pact-example

      # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ BROKER END ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ #

      - name: Run contract tests
        run: ./tests/run-pytest.sh
