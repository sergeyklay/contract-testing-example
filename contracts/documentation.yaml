---
openapi: 3.0.3

info:
  version: '1.0'
  title: Products API Definition
  description: Example API to test Specmatic features.
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  contact:
    name: Bug Tracker
    url: https://github.com/sergeyklay/specmatic-testing-example/issues
    email: egrep@protonmail.ch

servers:
  - description: Localhost
    url: http://127.0.0.1:5000

tags:
  - name: products
    description: Products related API.

components:
  schemas:
    Product:
      title: Product
      type: object
      properties:
        id:
          type: integer
          format: int32
          minimum: 1
          example: 42
        self_url:
          type: string
          example: https://example.com/v1/products/1
        title:
          type: string
          example: iPhone 9
          minLength: 1
          maxLength: 64
        description:
          type: string
          example: An Apple mobile which is nothing like apple
          minLength: 0
          maxLength: 512
        price:
          type: number
          minimum: 0
          example: 549
        discount:
          type: number
          minimum: 0.0
          example: 12.96
        rating:
          type: number
          minimum: 0.0
          maximum: 5.0
          example: 4.69
        stock:
          type: integer
          format: int32
          minimum: 0
          example: 856
        brand:
          type: string
          example: Apple, Inc.
          minLength: 1
          maxLength: 64
        category:
          $ref: '#/components/schemas/ProductCategory'
      required:
        - id
        - title
        - description
        - price
        - discount
        - rating
        - stock
        - brand
        - category
    ProductCategory:
      title: Product Category
      type: string
      enum:
        - smartphones
        - laptops
      example: smartphones
    NotFoundResponse:
      title: Not Found Response
      type: object
      required:
        - code
        - description
        - name
      properties:
        code:
          type: integer
          format: int32
          example: 404
        description:
          type: string
          example: Specified product not found
        name:
          type: string
          example: Not Found
    BadRequestResponse:
      title: Bad Request Response
      type: object
      required:
        - code
        - description
        - name
      properties:
        code:
          type: integer
          format: int32
          example: 400
        description:
          type: string
          example: Invalid product ID data type
        name:
          type: string
          example: Bad Request
  parameters:
    ProductIdParameter:
      in: path
      name: id
      description: Product ID param
      schema:
        type: integer
        format: int32
        minimum: 1
      required: true
      example: 42


paths:
  /v1/products:
    get:
      summary: Get products
      description: Returns a list of all products.
      operationId: products.index
      tags: [products]
      parameters:
        - in: query
          name: category
          description: Filter by product category.
          required: false
          schema:
            type: string
          examples:
            single:
              value: laptops
              summary: A sample category to filter products.
        - in: query
          name: q
          description: Search term.
          required: false
          schema:
            type: string
          examples:
            term:
              value: Samsung
              summary: A sample search keyword.
      responses:
        '200':
          description: List of products
          headers:
            ETag:
              schema:
                description: Used as caching key for future requests.
                type: string
                minLength: 34
                maxLength: 34
              example: '"c1983e057880c5d40817708584401e4d"'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
              examples:
                products:
                  value:
                    - id: 1
                      title: iPhone 9
                      description: An apple mobile which is nothing like apple
                      price: 549
                      discount: 12.96
                      rating: 4.69
                      stock: 94
                      brand: Apple
                      category: smartphones
                    - id: 6
                      title: Samsung Galaxy Book
                      description: Samsung Galaxy Book S (2020) Laptop With Intel Lakefield Chip, 8GB of RAM Launched
                      price: 1499
                      discount: 4.15
                      rating: 4.25
                      stock: 50
                      brand: Samsung
                      category: laptops
                  summary: A sample list of products.



  '/v1/products/{id}':
    get:
      summary: Get single product
      description: Returns a single product.
      operationId: products.get
      tags: [products]
      parameters:
        - $ref: '#/components/parameters/ProductIdParameter'
      responses:
        '200':
          description: A product
          headers:
            ETag:
              schema:
                description: Used as caching key for future requests.
                type: string
                minLength: 34
                maxLength: 34
              example: '"c1983e057880c5d40817708584401e4d"'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
    delete:
      summary: Delete product
      description: Deletes a specific product and returns status code 204 if successful, otherwise - 404.
      operationId: products.delete
      tags: [ products ]
      parameters:
        - $ref: '#/components/parameters/ProductIdParameter'
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
